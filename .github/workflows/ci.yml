name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety pip-audit
        pip install psutil memory-profiler line-profiler
        pip install -r requirements.txt
        
    - name: Code formatting check (Black)
      run: black --check --diff src/
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff src/
      
    - name: Linting (flake8)
      run: flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Security scan (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      
    - name: Dependency security check (Safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Dependency security check (pip-audit)
      run: pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true
      
    - name: Comprehensive security scan
      run: |
        python security/scanner.py --project-root . --output-dir security-reports
        echo "Security scan completed"
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          security-reports/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    strategy:
      matrix:
        test-type: [unit, integration]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-timeout
        pip install -r requirements.txt
        
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ -v --timeout=300
      env:
        TEST_MODE: true
        
    - name: Upload coverage reports
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psutil memory-profiler line-profiler locust
        pip install -r requirements.txt
        
    - name: Performance profiling
      run: |
        python tools/profiling.py
        echo "Performance profiling completed"
      continue-on-error: true
      
    - name: Load testing
      run: |
        python tools/load_testing.py --test-type keywords --workers 3
        echo "Load testing completed"
      continue-on-error: true
      
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          tools/profiling_reports/
          tools/load_test_reports/

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-security, test, performance-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test collection imports
      run: |
        python -c "
        import sys, os
        sys.path.insert(0, '.')
        from src.scripts.youtube_scraper_production import YouTubeScraperProduction
        from src.utils.firebase_client_enhanced import FirebaseClient
        from src.utils.redis_client_enhanced import RedisClient
        print('âœ“ All collection modules import successfully')
        "
        
    - name: Test entry points
      run: |
        python src/scripts/youtube_collection_manager.py --help 2>&1 || echo "Collection manager entry point exists"
        
    - name: Validate configuration files
      run: |
        python -c "
        import json
        with open('src/config/category_mapping.json') as f:
            data = json.load(f)
            assert 'ph_to_youtube_reddit_mapping' in data
            print(f'âœ“ Category mapping valid: {len(data[\"ph_to_youtube_reddit_mapping\"])} mappings')
        "

  deploy-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [lint-and-security, test, performance-check, build-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deployment readiness check
      run: |
        echo "âœ… All CI checks passed"
        echo "âœ… Code quality verified"
        echo "âœ… Tests passing"
        echo "âœ… Build verification complete"
        echo "ðŸš€ Ready for deployment"
        
    - name: Create deployment artifact
      run: |
        tar -czf youtube-scraper-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='logs/*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          .
          
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: youtube-scraper-${{ github.sha }}.tar.gz
        retention-days: 30