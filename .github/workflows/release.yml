name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Validate version format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format. Expected: vX.Y.Z"
          exit 1
        fi
        echo "✅ Version format is valid"
        
    - name: Check if tag exists
      if: github.event_name == 'workflow_dispatch'
      run: |
        if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "❌ Tag ${{ steps.version.outputs.version }} already exists"
          exit 1
        fi
        echo "✅ Tag is available"

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-timeout
        pip install flake8 black isort bandit safety
        pip install -r requirements.txt
        
    - name: Run comprehensive tests
      run: |
        echo "🧪 Running full test suite for release..."
        
        # Code quality checks
        black --check src/
        isort --check-only src/
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
        
        # Security checks
        bandit -r src/
        safety check
        
        # Unit tests with coverage
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-fail-under=70
        
        # Integration tests
        pytest tests/integration/ -v --timeout=300
        
        # Build verification
        python -c "
        import sys, os
        sys.path.insert(0, '.')
        from src.analytics.metrics.keywords_interval_metrics import *
        from src.analytics.aggregators.category_metrics_aggregator import *
        print('✅ All modules import successfully')
        "
        
        echo "✅ All tests passed for release"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "📝 Generating changelog since $LAST_TAG"
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          echo "📝 Generating changelog for initial release"
          COMMITS=$(git log --pretty=format:"- %s (%h)" | head -20)
        fi
        
        # Create changelog
        cat > CHANGELOG.md << EOF
        # Changelog for ${{ needs.validate-release.outputs.version }}
        
        ## Changes
        $COMMITS
        
        ## System Information
        - **Analytics Integration**: Complete analytics pipeline with metrics, aggregation, visualization
        - **VPN Infrastructure**: 24 verified Surfshark US servers
        - **Dependencies**: Updated with numpy, aiofiles, colorama for analytics
        - **Architecture**: Unified scraper + analytics system
        
        ## Deployment
        This release includes automated deployment via GitHub Actions.
        
        ## Testing
        - ✅ Full test suite passed
        - ✅ Security scans completed
        - ✅ Code quality checks passed
        - ✅ Analytics modules verified
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create release package
      run: |
        echo "📦 Creating release package..."
        
        # Create deployment-ready package
        mkdir -p release-package
        
        # Copy application files
        tar -czf release-package/youtube-scraper-${{ needs.validate-release.outputs.version }}.tar.gz \
          --exclude='.git' \
          --exclude='logs/*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.github' \
          --exclude='release-package' \
          .
          
        # Create deployment scripts package
        tar -czf release-package/deployment-scripts-${{ needs.validate-release.outputs.version }}.tar.gz \
          deployment/
          
        # Create checksums
        cd release-package
        sha256sum *.tar.gz > checksums.txt
        cd ..
        
        echo "✅ Release package created"
        
    - name: Create GitHub release
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        files: |
          release-package/*.tar.gz
          release-package/checksums.txt
          
    - name: Create tag and release (manual)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "🏷️ Creating tag ${{ needs.validate-release.outputs.version }}"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a ${{ needs.validate-release.outputs.version }} -m "Release ${{ needs.validate-release.outputs.version }}"
        git push origin ${{ needs.validate-release.outputs.version }}
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ needs.validate-release.outputs.version }}
        path: release-package/
        retention-days: 90

  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, create-release]
    environment: production
    if: github.event_name == 'push'  # Only auto-deploy for tag pushes
    
    steps:
    - name: Trigger deployment workflow
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy.yml',
            ref: '${{ needs.validate-release.outputs.version }}'
          });
          
    - name: Notify release deployment
      run: |
        echo "🚀 Release ${{ needs.validate-release.outputs.version }} deployment triggered"
        echo "📊 Monitor deployment progress in the Deploy workflow"

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
    - name: Notify stakeholders
      run: |
        echo "📢 Release ${{ needs.validate-release.outputs.version }} completed!"
        echo "🎉 New features and improvements are now available"
        echo "📚 Check the release notes for detailed changes"
        
    - name: Update documentation
      run: |
        echo "📖 Consider updating documentation for:"
        echo "  - API changes"
        echo "  - Configuration updates"
        echo "  - Deployment procedures"
        echo "  - User guides"